接口是一个抽象类，接口是无法被实例化，可以被实现，一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。
在Java的的中，接口类型可以来声明一个变量，他们可以成为一个空指针，或被被绑定在一个以上接口实现的对象。
接口注意：
         接口可以多继承
         接口的方法声明必须是 public abstract 即便不写默认也是
         接口里面不能包含方法具体实现
         类里面可以声明 public static final 修饰的变量
         接口不能被实例化，但是可以被实现类创建
接口好处：
         接口提供了关联以及方法调用上的可插入性，软件系统的规模越大，生命周期越长，接口使得软件系统的灵活性和可扩展性，可插入性方面得到保证
         简单、规范性：接口不仅告诉开发人员你需要实现那些业务，而且也将命名规范限制住了（防止一些开发人员随便命名导致别的程序员无法看明白）。
         维护、拓展性: 定义一个接口，定义类时实现这个接口，接口去引用实现它的类就行了，以后要换的话只不过是引用另一个类而已，这样就达到维护、拓展的方便性。
         安全，严密性：接口是实现软件松耦合的重要手段，它描叙了系统对外的所有服务，而不涉及任何具体的实现细节这样就比较安全，严密一些。
接口的扩展性：
         所谓的接口扩展就是接口的继承，不是继承一个类，而是继承一个接口
         //例子
         public interface Person {		//假设定义了一个人为父类接口
         void run();					//人有跑的行
         void sleep();				//人有睡觉的行为
         }
         //定义了一个子类接口去继承父类接口，就是扩展
         public interface Singer extends Person {       //定义一个歌手为人的一种工作类型
         void sing();							//唱歌的功能	
         }
         //singer测试类
         public class SingerTest implements Singer{			//实现了父类和子类的接口
         @Override
         public void run() {
         }
         @Override
         public void sleep() {
         }
         @Override
         public void sing() {
         }
         }
        
